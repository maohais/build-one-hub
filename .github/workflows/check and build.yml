name: Daily Build and Deploy

on:
  schedule:
    - cron: '0 0 * * *' # 每天午夜（UTC时间）执行
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Get tags from one-api repository
      id: get_tags_one_api
      uses: MightyCode/gh-action-get-tags@v2.0
      with:
        repository: 'MartialBE/one-api'

    - name: Get the latest tag from one-api
      id: get_latest_tag_one_api
      run: |
        echo "Tags from one-api: ${{ steps.get_tags_one_api.outputs.tags }}"
        latest_tag=$(echo "${{ steps.get_tags_one_api.outputs.tags }}" | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+' | sort -V | tail -n 1)
        echo "Latest tag from one-api is $latest_tag"
        echo "::set-output name=version::$latest_tag"

    - name: Get tags from current repository
      id: get_tags_current
      uses: MightyCode/gh-action-get-tags@v2.0
      with:
        repository: ${{ github.repository }}

    - name: Get the latest tag from current repository
      id: get_latest_tag_current
      run: |
        echo "Tags from current repository: ${{ steps.get_tags_current.outputs.tags }}"
        latest_tag=$(echo "${{ steps.get_tags_current.outputs.tags }}" | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+' | sort -V | tail -n 1)
        echo "Latest tag from current repository is $latest_tag"
        echo "::set-output name=version::$latest_tag"

    - name: Compare versions
      id: compare_versions
      run: |
        if [ "${{ steps.get_latest_tag_one_api.outputs.version }}" != "${{ steps.get_latest_tag_current.outputs.version }}" ]; then
          echo "Version numbers are different."
          echo "::set-output name=should_build::true"
        else
          echo "Version numbers are the same."
          echo "::set-output name=should_build::false"
        fi

    - name: Set up Go
      if: ${{ steps.compare_versions.outputs.should_build == 'true' }}
      uses: actions/setup-go@v2
      with:
        go-version: '^1.15' # 根据项目需求设置Go版本

    - name: Build for different platforms
      if: ${{ steps.compare_versions.outputs.should_build == 'true' }}
      run: |
        for os in windows linux freebsd; do
          for arch in 386 amd64 arm arm64; do
            echo "Building for $os-$arch"
            GOOS=$os GOARCH=$arch go build -o "one-api-$os-$arch-${{ steps.get_latest_tag_one_api.outputs.version }}" github.com/MartialBE/one-api
          done
        done

    - name: Create GitHub Release
      if: ${{ steps.compare_versions.outputs.should_build == 'true' }}
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get_latest_tag_one_api.outputs.version }}
        release_name: Release ${{ steps.get_latest_tag_one_api.outputs.version }}
        body: |
          Release notes for ${{ steps.get_latest_tag_one_api.outputs.version }}
        draft: false
        prerelease: false

    - name: Upload Release Asset
      if: ${{ steps.compare_versions.outputs.should_build == 'true' }}
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: one-api-*-${{ steps.get_latest_tag_one_api.outputs.version }}
        asset_name: one-api-${{ matrix.os }}-${{ matrix.arch }}-${{ steps.get_latest_tag_one_api.outputs.version }}
        asset_content_type: application/octet-stream
