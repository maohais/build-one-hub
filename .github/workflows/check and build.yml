name: Daily Build and Deploy

on:
  schedule:
    - cron: '0 0 * * *' # 每天午夜（UTC时间）执行
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [linux, windows, freebsd]
        arch: [amd64, 386, arm64] # 添加 arm64
        exclude:
          - os: windows
            arch: arm64
          - os: freebsd
            arch: 386
          - os: freebsd
            arch: arm64
    steps:
      - name: Get latest versions
        id: get_versions
        run: |
          one_api_version=$(curl -sSL -o /dev/null -w "%{http_code}" "https://api.github.com/repos/MartialBE/one-api/releases/latest" | grep 200 && echo $(curl -s "https://api.github.com/repos/MartialBE/one-api/releases/latest" | jq -r '.tag_name')) || echo "Failed to get one-api version"
          current_version=$(curl -sSL -o /dev/null -w "%{http_code}" "https://api.github.com/repos/$GITHUB_REPOSITORY/releases/latest" | grep 200 && echo $(curl -s "https://api.github.com/repos/$GITHUB_REPOSITORY/releases/latest" | jq -r '.tag_name')) || echo "Failed to get current version"
          echo "Latest one-api version: $one_api_version"
          echo "Latest current repository version: $current_version"
          if [ "$one_api_version" != "" ] && [ "$current_version" != "" ]; then
            should_build=$(if [[ "$one_api_version" != "$current_version" ]]; then echo true; else echo false; fi)
            echo "Should build: $should_build"
            echo "::set-output name=one_api_version::$one_api_version"
            echo "::set-output name=current_version::$current_version"
            echo "::set-output name=should_build::$should_build"
          else
            exit 1
          fi

      - name: Set up Go
        if: ${{ steps.get_versions.outputs.should_build == 'true' }}
        uses: actions/setup-go@v2
        with:
          go-version: '^1.15'

      - name: Build
        if: ${{ steps.get_versions.outputs.should_build == 'true' }}
        run: |
          GOOS=${{ matrix.os }} GOARCH=${{ matrix.arch }} go build -o "one-api-${{ matrix.os }}-${{ matrix.arch }}-${{ steps.get_versions.outputs.one_api_version }}" github.com/MartialBE/one-api

      - name: Create GitHub Release
        if: ${{ steps.get_versions.outputs.should_build == 'true' }}
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # 使用 GitHub Actions 提供的 token
        with:
          tag_name: ${{ steps.get_versions.outputs.one_api_version }}
          release_name: Release ${{ steps.get_versions.outputs.one_api_version }}
          body: |
            Release notes for ${{ steps.get_versions.outputs.one_api_version }}

      - name: Upload Release Asset
        if: ${{ steps.get_versions.outputs.should_build == 'true' }}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # 使用 GitHub Actions 提供的 token
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: one-api-${{ matrix.os }}-${{ matrix.arch }}-${{ steps.get_versions.outputs.one_api_version }}
          asset_name: one-api-${{ matrix.os }}-${{ matrix.arch }}-${{ steps.get_versions.outputs.one_api_version }}
          asset_content_type: application/octet-stream
