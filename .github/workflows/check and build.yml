name: Build One-Hub

on:
  schedule:
    - cron: '0 0 * * *' # 每天 00:00 UTC 运行
  workflow_dispatch: # 手动触发 workflow

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        arch: [x64, x86, arm64, arm]
        include:
          - os: windows-latest
            arch: x64
            artifact_name: one-hub-windows-amd64.zip
          - os: windows-latest
            arch: x86
            artifact_name: one-hub-windows-386.zip
          - os: ubuntu-latest
            arch: x64
            artifact_name: one-hub-linux-amd64.tar.gz
          - os: ubuntu-latest
            arch: x86
            artifact_name: one-hub-linux-i686.tar.gz
          - os: ubuntu-latest
            arch: arm64
            artifact_name: one-hub-linux-arm64.tar.gz
          - os: ubuntu-latest
            arch: arm
            artifact_name: one-hub-linux-armv7l.tar.gz
          - os: macos-latest
            arch: arm64
            artifact_name: one-hub-darwin-arm64.tar.gz
          - os: macos-latest
            arch: x64
            artifact_name: one-hub-darwin-amd64.tar.gz
          - os: ubuntu-latest
            arch: x64
            target_os: freebsd
            artifact_name: one-hub-freebsd-amd64.tar.gz

    steps:
      - name: Checkout MartialBE/one-hub
        uses: actions/checkout@v3
        with:
          repository: MartialBE/one-hub
          ref: main # 或者你想要checkout的分支/tag
          fetch-depth: 0 # 获取所有提交记录，用于比较tag

      - name: Get Latest Tag
        id: get_latest_tag
        run: |
          latest_tag=$(git describe --tags --abbrev=0 || echo "0")
          echo "::set-output name=tag::$latest_tag"

      - name: Checkout maohais/build-one-hub (用于获取之前的tag)
        uses: actions/checkout@v3
        with:
          path: build-repo # checkout到build-repo文件夹
          fetch-depth: 0

      - name: Get Previous Release Tag
        id: get_previous_tag
        run: |
          cd build-repo
          previous_tag=$(git describe --tags --abbrev=0 || echo "0")
          echo "::set-output name=tag::$previous_tag"
          cd .. # 切回workflow根目录

      - name: Check if build is needed
        id: check_build
        run: |
          if [[ "${{ steps.get_latest_tag.outputs.tag }}" != "${{ steps.get_previous_tag.outputs.tag }}" ]]; then
            echo "::set-output name=needed::true"
          else
            echo "::set-output name=needed::false"
          fi

      - name: Set up build environment (Linux/macOS)
        if: matrix.os != 'windows-latest' && matrix.target_os != 'freebsd' && steps.check_build.outputs.needed == 'true'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential

      - name: Build (FreeBSD)
        if: matrix.target_os == 'freebsd' && steps.check_build.outputs.needed == 'true'
        run: |
          docker run --rm -v "$(pwd):/app" freebsd:latest sh -c "pkg update -f && pkg install -y make gcc tar gzip && cd /app && make"

      - name: Build (Other OS)
        if: matrix.os != 'windows-latest' && matrix.target_os != 'freebsd' && steps.check_build.outputs.needed == 'true'
        shell: bash
        run: |
           make # 假设使用make构建
           # 如果需要根据不同系统执行不同的构建命令，请在此处添加判断
           #例如 if [[ "${{ matrix.os }}" == "macos-latest" ]]; then 具体macos的命令; fi

      - name: Create Release Artifact (FreeBSD)
        if: matrix.target_os == 'freebsd' && steps.check_build.outputs.needed == 'true'
        run: |
          tar czf ${{ matrix.artifact_name }} one-api

      - name: Create Release Artifact (Other OS)
        if: matrix.os != 'windows-latest' && matrix.target_os != 'freebsd' && steps.check_build.outputs.needed == 'true'
        run: |
            tar czf ${{ matrix.artifact_name }} one-api #假设所有非freebsd平台打包方式相同，不同请修改

      - name: Create Release
        uses: actions/create-release@v1
        if: steps.check_build.outputs.needed == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_latest_tag.outputs.tag }}
          release_name: Release ${{ steps.get_latest_tag.outputs.tag }}
          draft: false
          prerelease: false

      - name: Upload Release Artifact
        uses: actions/upload-release-asset@v1
        if: steps.check_build.outputs.needed == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./${{ matrix.artifact_name }}
          asset_name: ${{ matrix.artifact_name }}
          asset_content_type: application/octet-stream
