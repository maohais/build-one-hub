name: Daily Build and Deploy

on:
  schedule:
    - cron: '0 0 * * *' # 每天午夜 (UTC 时间) 执行
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [linux, windows, freebsd]
        arch: [amd64, 386, arm64]
        exclude:
          - os: windows
            arch: arm64
          - os: freebsd
            arch: 386
          - os: freebsd
            arch: arm64

    steps:
      - name: Get latest release
        id: latest_release
        uses: marvinpinto/action-automatic-releases@v1.2.1 # 推荐使用固定版本号，避免意外更改
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: "latest" # 或者使用其他策略，如根据 package.json 或 Git tags
          prerelease: false # 是否包含预发布版本，根据你的需求设置
          title: "Release ${{ steps.latest_release.outputs.release_version }}" # 设置 Release 标题
          files: | # 设置需要包含在 Release 中的文件，这里先留空，稍后添加
      - name: Output Release Version
        if: steps.latest_release.outcome == 'success' # 只有在获取 Release 成功时才执行后续步骤
        run: |
            if [ -z "${{ steps.latest_release.outputs.release_version }}" ]; then
              echo "No Release found."
              exit 0
            fi
            echo "Release Version: ${{ steps.latest_release.outputs.release_version }}"
            echo "::set-output name=release_version::${{ steps.latest_release.outputs.release_version }}"

      - name: Set up Go
        if: steps.latest_release.outcome == 'success'
        uses: actions/setup-go@v4
        with:
          go-version-file: 'go.mod'

      - name: Build
        if: steps.latest_release.outcome == 'success'
        run: |
          if [ -z "${{ steps.latest_release.outputs.release_version }}" ]; then
            echo "No version to build, skip."
            exit 0
          fi
          GOOS=${{ matrix.os }} GOARCH=${{ matrix.arch }} go build -o "one-api-${{ matrix.os }}-${{ matrix.arch }}-${{ steps.latest_release.outputs.release_version }}" github.com/MartialBE/one-api

      - name: Upload Release Asset
        if: steps.latest_release.outcome == 'success'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.latest_release.outputs.upload_url }}
          asset_path: one-api-${{ matrix.os }}-${{ matrix.arch }}-${{ steps.latest_release.outputs.release_version }}
          asset_name: one-api-${{ matrix.os }}-${{ matrix.arch }}-${{ steps.latest_release.outputs.release_version }}
          asset_content_type: application/octet-stream
